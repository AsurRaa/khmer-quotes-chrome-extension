{"version":3,"sources":["assets/logo-github.svg","assets/cog-outline.svg","components/layouts/ParticleLayout.tsx","components/Setting.tsx","app/App.tsx","others/serviceWorker.ts","index.tsx"],"names":["module","exports","ParticleLayout","props","width","height","options","background","color","value","fpsLimit","interactivity","detectsOn","events","onClick","enable","mode","onHover","resize","modes","bubble","distance","duration","opacity","size","push","quantity","repulse","particles","links","collisions","move","direction","outMode","random","speed","straight","number","density","value_area","shape","type","detectRetina","Setting","useState","toggle","setToggle","React","useEffect","localStorageParticle","localStorage","getItem","style","padding","display","flexDirection","onChangeComplete","setItem","hex","window","location","reload","justifyContent","margin","alignItems","checked","onChange","Button","githubIcon","require","settingIcon","App","quotes","setQuotes","timer","setTimer","openSetting","setOpenSetting","isParticle","setIsParticle","bgColor","setBgColor","Math","floor","datas","length","interval","setInterval","console","log","timing","moment","locale","format","clearInterval","position","zIndex","backgroundColor","top","left","transform","fontSize","fontWeight","textAlign","quoteNameKH","author","bottom","right","content","isOpen","trigger","triggerProps","alt","id","cursor","src","marginRight","open","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.868f63f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-github.01fb3515.svg\";","module.exports = __webpack_public_path__ + \"static/media/cog-outline.9308e2de.svg\";","import React from \"react\";\nimport Particles from \"react-tsparticles\";\n\nconst ParticleLayout = (props: any) => {\n  return (\n    <div>\n      <Particles\n        width={\"100vw\"}\n        height={\"100vh\"}\n        options={{\n          background: {\n            color: {\n              value: \"white\",\n            },\n          },\n          fpsLimit: 60,\n          interactivity: {\n            detectsOn: \"canvas\",\n            events: {\n              onClick: {\n                enable: true,\n                mode: \"push\",\n              },\n              onHover: {\n                enable: true,\n                mode: \"repulse\",\n              },\n              resize: true,\n            },\n            modes: {\n              bubble: {\n                distance: 400,\n                duration: 2,\n                opacity: 0.8,\n                size: 40,\n              },\n              push: {\n                quantity: 4,\n              },\n              repulse: {\n                distance: 200,\n                duration: 0.4,\n              },\n            },\n          },\n          particles: {\n            color: {\n              value: \"#000000\",\n            },\n            links: {\n              color: \"#000000\",\n              distance: 150,\n              enable: true,\n              opacity: 0.5,\n              width: 0.5,\n            },\n            collisions: {\n              enable: true,\n            },\n            move: {\n              direction: \"none\",\n              enable: true,\n              outMode: \"bounce\",\n              random: false,\n              speed: 6,\n              straight: false,\n            },\n            number: {\n              density: {\n                enable: true,\n                value_area: 800,\n              },\n              value: 80,\n            },\n            opacity: {\n              value: 0.5,\n            },\n            shape: {\n              type: \"line\",\n            },\n            size: {\n              random: true,\n              value: 5,\n            },\n          },\n          detectRetina: true,\n        }}\n      ></Particles>\n    </div>\n  );\n};\nexport default ParticleLayout;\n","import React, { FC, useState } from \"react\";\nimport { GithubPicker } from \"react-color\";\nimport Button from \"@atlaskit/button\";\nconst Setting: FC = (props) => {\n  let [toggle, setToggle] = useState<boolean>(true);\n\n  React.useEffect(() => {\n    let localStorageParticle = localStorage.getItem(\"isParticle\");\n    if (localStorageParticle === \"true\") {\n      setToggle(true);\n    } else {\n      setToggle(false);\n    }\n  }, []);\n  return (\n    <div style={{ padding: 5 }}>\n      <div\n        style={{\n          display: \"flex\",\n\n          flexDirection: \"column\",\n        }}\n      >\n        <div>\n          <GithubPicker\n            onChangeComplete={(color) => {\n              localStorage.setItem(\"bgColor\", `${color.hex}`);\n              window.location.reload();\n            }}\n          />\n        </div>\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n          <div style={{ display: \"flex\" }}>\n            <div style={{ margin: 5 }}>\n              <p>Particle</p>\n            </div>\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n              <input\n                type=\"checkbox\"\n                checked={toggle}\n                onChange={() => {\n                  window.localStorage.setItem(\"isParticle\", `${!toggle}`);\n                  setToggle(!toggle);\n                  window.location.reload();\n                }}\n              />\n            </div>\n          </div>\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\n            <Button\n              onClick={() => {\n                localStorage.setItem(\"bgColor\", \"white\");\n                localStorage.setItem(\"isParticle\", \"false\");\n                window.location.reload();\n              }}\n            >\n              Reset\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Setting;\n","import React, { useEffect, useState } from \"react\";\nimport ParticleLayout from \"../components/layouts/ParticleLayout\";\nimport datas from \"../data/quotes.json\";\nimport moment from \"moment\";\nimport \"moment/locale/km\";\nimport { quotesInterface } from \"../interface/interface\";\nimport Popup from \"@atlaskit/popup\";\nimport Button from \"@atlaskit/button\";\nimport Setting from \"../components/Setting\";\n\nconst githubIcon = require(\"../assets/logo-github.svg\");\nconst settingIcon = require(\"../assets/cog-outline.svg\");\n\nfunction App() {\n  const [quotes, setQuotes] = useState<quotesInterface>();\n  const [timer, setTimer] = useState();\n  const [openSetting, setOpenSetting] = useState<boolean>(false);\n  const [isParticle, setIsParticle] = useState<boolean | null>(true);\n  let [bgColor, setBgColor] = useState<string | null>(\"white\");\n  useEffect(() => {\n    setBgColor(localStorage.getItem(\"bgColor\"));\n    let localStorageParticle = localStorage.getItem(\"isParticle\");\n    if (localStorageParticle === \"true\") {\n      setIsParticle(true);\n    } else {\n      setIsParticle(false);\n    }\n\n    let random = Math.floor(Math.random() * datas.length);\n    setQuotes(datas[random]);\n    const interval = setInterval(() => {\n      console.log(\"This will run every second!\");\n      let timing = moment().locale(\"km\").format(\"MMMM Do YYYY, h:mm:ss a\");\n      // @ts-ignore\n      setTimer(timing);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <>\n      <div\n        style={{ position: \"fixed\", zIndex: -1, backgroundColor: `${bgColor}` }}\n      >\n        {isParticle === true ? <ParticleLayout /> : null}\n      </div>\n      <div\n        style={{\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: \"translate(-50%, -50%)\",\n        }}\n      >\n        <p style={{ fontSize: \"1.5rem\", fontWeight: 400, textAlign: \"center\" }}>\n          <p>{quotes?.quoteNameKH}</p>\n        </p>\n        <p style={{ fontSize: \"1rem\", fontWeight: 500, textAlign: \"center\" }}>\n          {quotes?.author}\n        </p>\n      </div>\n      <div style={{ position: \"absolute\", bottom: \"1%\", right: \"1%\" }}>\n        <Popup\n          content={() => <Setting />}\n          isOpen={openSetting}\n          trigger={(triggerProps) => (\n            <Button\n              alt=\"logo\"\n              id=\"popup-trigger\"\n              {...triggerProps}\n              onClick={() => setOpenSetting(!openSetting)}\n              style={{ cursor: \"pointer\" }}\n              src={settingIcon}\n              width={30}\n              height={30}\n            />\n          )}\n        />\n      </div>\n      <div style={{ position: \"absolute\", bottom: \"1%\", left: \"1%\" }}>\n        <div style={{ display: \"flex\", justifyContent: \"flex-start\" }}>\n          <div\n            style={{\n              cursor: \"pointer\",\n              display: \"flex\",\n              alignItems: \"center\",\n              marginRight: 5,\n            }}\n            onClick={() =>\n              window.open(\n                \"https://github.com/AsurRaa/khmer-quotes-extension\",\n                \"_blank\"\n              )\n            }\n          >\n            <img src={githubIcon} width={40} height={40} alt=\"setting\" />\n          </div>\n          <div style={{}}>\n            <p style={{ fontSize: 12, padding: 0, margin: 0 }}>\n              Powered by{\" \"}\n              <span\n                onClick={() => window.open(\"https://asurraa.com\", \"_blank\")}\n                style={{ fontWeight: \"bold\", cursor: \"pointer\" }}\n              >\n                AsurRaa\n              </span>\n            </p>\n            {timer}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./app/App\";\n// import \"antd/dist/antd.css\";\nimport * as serviceWorker from \"./others/serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}